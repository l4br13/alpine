#!/bin/sh

if [ $(id -u) = 0 ]; then
	printf "$(basename $0): run as (root)\n"
	printf "Abort.\n"
	exit 1
fi

os=$(uname -o)

case $1 in
	-*)
		break
	;;
	*)
		com=1
		__com__=$@
		break
	;;
esac

if [ -z $com ]; then
	opt=$(getopt -n $(basename $0) -o hvl -l help,version,login -- "$@")
	if [ $? -ne 0 ]; then
		exit
	fi
	eval set -- $opt
	while true; do
		if [[ $1 == -- ]]; then
			shift
			__param__=$@
			break
		else
			case $1 in
				--help|-h)
					__help__=1
				;;
				--version|-v)
					__version__=1
				;;
				--login|-l)
					__login__=1
				;;
				*)
					break
				;;
			esac
		fi
		shift
	done
fi

if [ $os = "Android" ]; then
	prefix=$PREFIX/share
	dir=$prefix/alpine
	tmp=$PREFIX/tmp/alpine
	root=$dir/rootfs
	[ -d $tmp ] || mkdir $tmp
else
	prefix=/usr
	dir=$prefix/share/alpine
	tmp=/tmp/alpine
	root=$dir/rootfs
	[ -d $tmp ] || mkdir $tmp
	if [ $(id -u) != 0 ]; then
		[ ! -f $prefix/bin/sudo ] || sudo=1
	fi
fi

__usage__ () {
	printf "Usage:	$(basename $0) [command]\n"
	printf "	$(basename $0) [options]\n"
	printf "\n"
	printf "Options:\n"
	printf "	--login			login to linux alpine mini rootfs.\n"
	printf " -v,	--version		show alpine linux version info.\n"
	printf " -h,	--help			show help information.\n"
	printf "\n"
	return 1
}

__version__ () {
	if [ ! -f $root/etc/os-release ]; then
		exit 1
	fi
	. $root/etc/os-release
	printf "$PRETTY_NAME\n"
	return 1
}

__setup__ () {

	if [ $os = "GNU/Linux" ]; then
		[ -z $sudo ] || {
			sudo -v || {
				printf "$(basename $0): permission denied\n"
				exit 1
			}
		}
	fi

	rel=latest-stable
	arch=$(uname -m)
	url=https://dl-cdn.alpinelinux.org
	ping=$(curl -s $url/alpine --connect-timeout 10)
	rel_url=$url/alpine/$rel/releases/$arch/latest-releases.yaml

	if [ ! -d $dir ]; then
		if [ ! -z $sudo ]; then
			sudo mkdir $dir
		else
			mkdir $dir
		fi
	fi

	if [ ! -d $root ]; then
		if [[ ! -z $sudo ]]; then
			sudo mkdir $root
		else
			mkdir $root
		fi
	fi

	if [ ! -z $sudo ]; then
		latest_releases=$(curl -s $rel_url -o $dir/$rel-releases.yaml --connect-timeout 10)
		if [ -f $dir/$rel-releases.yaml ]; then
			version=$(cat $dir/$rel-releases.yaml | grep -m 1 -o version.* | sed -e 's/[^0-9.]*//g' -e 's/-$//')
			rootfs="alpine-minirootfs-${version}-${arch}.tar.gz"
			url_rootfs=$url/alpine/$rel/releases/$arch/$rootfs
			rootfs_file=$dir/$rootfs
			if [ ! -f $dir/$rootfs ]; then
				sudo curl --progress-bar -L --fail --retry 4 $url_rootfs -o $rootfs_file || {
					printf "installation aborted.\n"
					exit 1
				}
			fi
			sudo tar -xf $rootfs_file -C $root || {
				printf "extract: error: $rootfs corrupted."
				rm -rf $rootfs_file
				printf "installation aborted.\n"
				exit 1
			}
			sudo cp $root/etc/apk/repositories $root/etc/apk/repositories.bak
			sudo rm -rf $tmp/repositories
			printf "https://dl-cdn.alpinelinux.org/alpine/$rel/main/\n" > $tmp/repositories
			printf "https://dl-cdn.alpinelinux.org/alpine/$rel/community/\n" >> $tmp/repositories
			if [ $rel = "edge" ]; then
				printf "https://dl-cdn.alpinelinux.org/alpine/edge/testing/\n" >> $tmp/repositories
			fi
			sudo cp $tmp/repositories $root/etc/apk/repositories
			sudo rm -rf $tmp/resolv
			printf "nameserver 1.1.1.1" > $tmp/resolv 
			sudo cp $tmp/resolv $root/etc/resolv.conf
			sudo rm -rf $tmp/profile
			cat $root/etc/profile > $tmp/profile
			echo 'PS1="\w \\$ "' >> $tmp/profile
			echo 'cd $HOME' >> $tmp/profile
			sudo cp $tmp/profile $root/etc/profile
		fi
	fi
	return 1
}

__exec__() {
	if [ $os = "Android" ]; then
		root=$dir/rootfs
		unset LD_PRELOAD
		android=$(getprop ro.build.version.release)
		if [ ${android%%.*} -lt 8 ]; then
			[ $(command -v getprop) ] && getprop | sed -n -e 's/^\[net\.dns.\]: \[\(.*\)\]/\1/p' | sed '/^\s*$/d' | sed 's/^/nameserver /' > $root/etc/resolv.conf
		fi
		exec proot --link2symlink -0 -r ${alpine}/ -b /dev/ -b /sys/ -b /proc/ -b /sdcard -b /storage -b $HOME -w /home /usr/bin/env TMPDIR=/tmp HOME=/home PREFIX=/usr SHELL=/bin/sh TERM="$TERM" LANG=$LANG PATH=/bin:/usr/bin:/sbin:/usr/sbin sh -c "$*"
		return 1
	else
		if [ ! -z $sudo ]; then
			root=$dir/rootfs
			OLD_PATH=$PATH
			PATH=$OLD_PATH:/bin:/sbin:/usr/bin
			sudo mount -t proc /proc $root/proc/
			sudo mount -t sysfs /sys $root/sys/
			sudo cp /etc/resolv.conf $root/etc/resolv.conf
			sudo chroot $root sh -c "$*" || {
				sudo umount -rq $root/proc/
				sudo umount -rq $root/sys/
				PATH=$OLD_PATH
				exit
			}
			sudo umount -rq $root/proc/
			sudo umount -rq $root/sys/
			PATH=$OLD_PATH
			exit
		else 
			old_path=$PATH
			root=$dir/rootfs
			PATH=$old_path:/bin
			mount -t proc /proc $root/proc/
			mount -t sysfs /sys $root/sys/
			cp /etc/resolv.conf $root/etc/resolv.conf
			chroot $root /bin/sh -c "$*" || {
				umount -r $root/proc/
				umount -r $root/sys/
				PATH=$old_path
				exit
			}
			umount -r $root/proc/
			umount -r $root/sys/
			PATH=$old_path
			exit
		fi
	fi
	return 1
}

if [ ! -z $__help__ ]; then
	__usage__
elif [ ! -z $__version__ ]; then
	if [ -f $root/etc/os-release ]; then
		__version__
	else
		exit 1
	fi
elif [ ! -z $__login__ ]; then
	__exec__ "sh --login"
else
	if [ ! -f $root/etc/os-release ]; then
		__setup__
	fi
	__exec__ $__com__
fi